generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id                                         String      @id
  userId                                     String
  type                                       AddressType @default(SHIPPING)
  firstName                                  String
  lastName                                   String
  company                                    String?
  street                                     String
  city                                       String
  state                                      String?
  postalCode                                 String
  country                                    String
  phone                                      String?
  isDefault                                  Boolean     @default(false)
  createdAt                                  DateTime    @default(now())
  updatedAt                                  DateTime
  users                                      users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders_orders_billingAddressIdToaddresses  orders[]    @relation("orders_billingAddressIdToaddresses")
  orders_orders_shippingAddressIdToaddresses orders[]    @relation("orders_shippingAddressIdToaddresses")

  @@index([isDefault])
  @@index([type])
  @@index([userId])
}

model bundle_items {
  id                                        String   @id
  bundleId                                  String
  productId                                 String
  quantity                                  Int      @default(1)
  discountPercent                           Decimal? @db.Decimal(5, 2)
  createdAt                                 DateTime @default(now())
  products_bundle_items_bundleIdToproducts  products @relation("bundle_items_bundleIdToproducts", fields: [bundleId], references: [id], onDelete: Cascade)
  products_bundle_items_productIdToproducts products @relation("bundle_items_productIdToproducts", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId])
  @@index([bundleId])
  @@index([productId])
}

model cart_items {
  id        String   @id
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  carts     carts    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  products  products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@index([updatedAt])
}

model carts {
  id         String       @id
  userId     String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  cart_items cart_items[]
  users      users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
  @@index([userId])
}

model categories {
  id               String       @id
  name             String       @unique
  slug             String       @unique
  description      String?
  image            String?
  parentId         String?
  isActive         Boolean      @default(true)
  sortOrder        Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  categories       categories?  @relation("categoriesTocategories", fields: [parentId], references: [id])
  other_categories categories[] @relation("categoriesTocategories")
  products         products[]

  @@index([isActive])
  @@index([parentId])
  @@index([slug])
  @@index([sortOrder])
}

model homepage_configs {
  id                String    @id
  isActive          Boolean   @default(true)
  featuredProductId String?
  bundleProducts    Json      @default("[]")
  popularProducts   Json      @default("[]")
  categoriesConfig  Json      @default("[]")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  createdBy         String?
  updatedBy         String?
  products          products? @relation(fields: [featuredProductId], references: [id])

  @@index([createdAt])
  @@index([featuredProductId])
  @@index([isActive])
  @@index([updatedAt])
}

model order_items {
  id           String   @id
  orderId      String
  productId    String
  quantity     Int
  price        Decimal  @db.Decimal(10, 2)
  totalPrice   Decimal  @db.Decimal(10, 2)
  productName  String
  productSku   String
  productImage String?
  orders       orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products     products @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([productSku])
}

model orders {
  id                                            String            @id
  orderNumber                                   String            @unique
  userId                                        String
  billingAddressId                              String?
  shippingAddressId                             String?
  status                                        OrderStatus       @default(PENDING)
  paymentStatus                                 PaymentStatus     @default(PENDING)
  fulfillmentStatus                             FulfillmentStatus @default(UNFULFILLED)
  subtotal                                      Decimal           @db.Decimal(10, 2)
  taxAmount                                     Decimal?          @db.Decimal(10, 2)
  shippingAmount                                Decimal?          @db.Decimal(10, 2)
  discountAmount                                Decimal?          @db.Decimal(10, 2)
  totalAmount                                   Decimal           @db.Decimal(10, 2)
  email                                         String
  phone                                         String?
  billingFirstName                              String
  billingLastName                               String
  billingCompany                                String?
  billingStreet                                 String
  billingCity                                   String
  billingState                                  String?
  billingPostalCode                             String
  billingCountry                                String
  shippingFirstName                             String?
  shippingLastName                              String?
  shippingCompany                               String?
  shippingStreet                                String?
  shippingCity                                  String?
  shippingState                                 String?
  shippingPostalCode                            String?
  shippingCountry                               String?
  notes                                         String?
  createdAt                                     DateTime          @default(now())
  updatedAt                                     DateTime
  order_items                                   order_items[]
  addresses_orders_billingAddressIdToaddresses  addresses?        @relation("orders_billingAddressIdToaddresses", fields: [billingAddressId], references: [id])
  addresses_orders_shippingAddressIdToaddresses addresses?        @relation("orders_shippingAddressIdToaddresses", fields: [shippingAddressId], references: [id])
  users                                         users             @relation(fields: [userId], references: [id])
  payments                                      payments[]
  shipments                                     shipments[]

  @@index([createdAt])
  @@index([email])
  @@index([fulfillmentStatus])
  @@index([orderNumber])
  @@index([paymentStatus])
  @@index([status])
  @@index([status, paymentStatus])
  @@index([updatedAt])
  @@index([userId, createdAt])
  @@index([userId])
  @@index([userId, status])
}

model password_reset_tokens {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([expiresAt, used])
  @@index([token])
  @@index([used])
  @@index([userId])
  @@index([userId, used])
}

model payments {
  id            String        @id
  orderId       String
  method        PaymentMethod
  provider      String?
  transactionId String?
  clientSecret  String?
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  currency      String        @default("NOK")
  metadata      Json?
  confirmedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  orders        orders        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([confirmedAt])
  @@index([createdAt])
  @@index([method])
  @@index([orderId])
  @@index([orderId, status])
  @@index([provider])
  @@index([status])
  @@index([transactionId])
}

model product_images {
  id               String     @id
  productId        String
  url              String
  altText          String?
  sortOrder        Int        @default(0)
  imageType        ImageType? @default(GENERAL)
  isPrimary        Boolean    @default(false)
  originalFileName String?
  createdAt        DateTime   @default(now())
  products         products   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([imageType])
  @@index([isPrimary])
  @@index([productId])
  @@index([productId, imageType])
  @@index([productId, isPrimary])
  @@index([sortOrder])
}

model product_variants {
  id        String   @id
  productId String
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  sku       String?  @unique
  quantity  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model products {
  id                                            String             @id
  name                                          String
  slug                                          String             @unique
  description                                   String?
  shortDescription                              String?
  sku                                           String             @unique
  price                                         Decimal            @db.Decimal(10, 2)
  comparePrice                                  Decimal?           @db.Decimal(10, 2)
  costPrice                                     Decimal?           @db.Decimal(10, 2)
  trackQuantity                                 Boolean            @default(true)
  quantity                                      Int                @default(0)
  lowStockThreshold                             Int?
  weight                                        Decimal?           @db.Decimal(8, 3)
  dimensions                                    String?
  status                                        ProductStatus      @default(DRAFT)
  isActive                                      Boolean            @default(true)
  isFeatured                                    Boolean            @default(false)
  isBundle                                      Boolean            @default(false)
  tags                                          String[]
  metaTitle                                     String?
  metaDescription                               String?
  createdAt                                     DateTime           @default(now())
  updatedAt                                     DateTime
  categoryId                                    String
  bundle_items_bundle_items_bundleIdToproducts  bundle_items[]     @relation("bundle_items_bundleIdToproducts")
  bundle_items_bundle_items_productIdToproducts bundle_items[]     @relation("bundle_items_productIdToproducts")
  cart_items                                    cart_items[]
  homepage_configs                              homepage_configs[]
  order_items                                   order_items[]
  product_images                                product_images[]
  product_variants                              product_variants[]
  categories                                    categories         @relation(fields: [categoryId], references: [id])
  reviews                                       reviews[]
  wishlists                                     wishlists[]

  @@index([categoryId])
  @@index([categoryId, isActive, status])
  @@index([categoryId, price])
  @@index([createdAt])
  @@index([isActive])
  @@index([isActive, status, isFeatured])
  @@index([isBundle])
  @@index([isFeatured])
  @@index([price])
  @@index([sku])
  @@index([slug])
  @@index([status])
}

model refresh_tokens {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([token])
  @@index([userId, expiresAt])
  @@index([userId])
}

model reviews {
  id         String   @id
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  products   products @relation(fields: [productId], references: [id], onDelete: Cascade)
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([createdAt])
  @@index([isVerified])
  @@index([productId])
  @@index([productId, isVerified])
  @@index([productId, rating])
  @@index([rating])
  @@index([userId])
}

model shipments {
  id             String         @id
  orderId        String
  trackingNumber String?
  carrier        String?
  method         String?
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  orders         orders         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([carrier])
  @@index([createdAt])
  @@index([deliveredAt])
  @@index([orderId])
  @@index([shippedAt])
  @@index([status])
  @@index([trackingNumber])
}

model users {
  id                    String                  @id
  email                 String                  @unique
  firstName             String?
  lastName              String?
  password              String
  phone                 String?
  avatar                String?
  role                  UserRole                @default(CUSTOMER)
  isActive              Boolean                 @default(true)
  isVerified            Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  addresses             addresses[]
  carts                 carts?
  orders                orders[]
  password_reset_tokens password_reset_tokens[]
  refresh_tokens        refresh_tokens[]
  reviews               reviews[]
  wishlists             wishlists[]

  @@index([createdAt])
  @@index([email])
  @@index([isActive])
  @@index([role])
}

model wishlists {
  id        String   @id
  userId    String
  productId String
  createdAt DateTime @default(now())
  products  products @relation(fields: [productId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([createdAt])
  @@index([productId])
  @@index([userId])
}

enum AddressType {
  SHIPPING
  BILLING
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum ImageType {
  FRONT
  BACK
  SIDE
  INGREDIENTS
  LABEL
  GENERAL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  VIPPS
  KLARNA
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  PAID
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  FAILED
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}
