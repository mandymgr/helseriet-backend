// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String?
  lastName    String?
  password    String
  phone       String?
  avatar      String?
  role        UserRole  @default(CUSTOMER)
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  addresses   Address[]
  orders      Order[]
  cart        Cart?
  reviews     Review[]
  wishlist    Wishlist[]
  
  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  type        AddressType @default(SHIPPING)
  firstName   String
  lastName    String
  company     String?
  street      String
  city        String
  state       String?
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")

  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  description   String?
  shortDescription String?
  sku           String      @unique
  price         Decimal     @db.Decimal(10, 2)
  comparePrice  Decimal?    @db.Decimal(10, 2)
  costPrice     Decimal?    @db.Decimal(10, 2)
  trackQuantity Boolean     @default(true)
  quantity      Int         @default(0)
  lowStockThreshold Int?
  weight        Decimal?    @db.Decimal(8, 3)
  dimensions    String?
  status        ProductStatus @default(DRAFT)
  isActive      Boolean     @default(true)
  isFeatured    Boolean     @default(false)
  tags          String[]
  metaTitle     String?
  metaDescription String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems Wishlist[]

  @@map("products")
}

model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  url         String
  altText     String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  name        String
  value       String
  price       Decimal? @db.Decimal(10, 2)
  sku         String?  @unique
  quantity    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  billingAddressId String?
  shippingAddressId String?
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Pricing
  subtotal        Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal?    @db.Decimal(10, 2)
  shippingAmount  Decimal?    @db.Decimal(10, 2)
  discountAmount  Decimal?    @db.Decimal(10, 2)
  totalAmount     Decimal     @db.Decimal(10, 2)
  
  // Customer info
  email           String
  phone           String?
  
  // Billing address
  billingFirstName String
  billingLastName  String
  billingCompany   String?
  billingStreet    String
  billingCity      String
  billingState     String?
  billingPostalCode String
  billingCountry   String
  
  // Shipping address
  shippingFirstName String?
  shippingLastName  String?
  shippingCompany   String?
  shippingStreet    String?
  shippingCity      String?
  shippingState     String?
  shippingPostalCode String?
  shippingCountry   String?
  
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  
  // Product snapshot
  productName String
  productSku  String
  productImage String?

  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  method          PaymentMethod
  provider        String?
  transactionId   String?
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  currency        String        @default("NOK")
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Shipment {
  id            String           @id @default(cuid())
  orderId       String
  trackingNumber String?
  carrier       String?
  method        String?
  status        ShipmentStatus   @default(PENDING)
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  order         Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlists")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  VIPPS
  KLARNA
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
  FAILED
}